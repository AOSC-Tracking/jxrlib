language: cpp

env:
  global:
      - secure: "kof5OhO8fMloYaFhXN0V6SPz5cn/PPAs7sX4e4qD/y9KFMYx7q3MS48cddVlNn1o6MuzydbUKAO6ZUQIKjRU5N0gljpcC4/UsBn+58EzyOymNdRsc+cdlX4kmENcqcLtH6emkigmJWlULsCnSHTB+CETglDXxCRsrS7Ib0MmsUXyFzZpOLteh+5WsOkpMxw+t1JTj06b36XWuihyhMc7/XcpXyDkLRy9GHyAO0CI/AdBJtBX0oS3l/Gmu52g8uiY/nc4680mhBuDcN7A9UMWsVCIttxOGU27vU2AckqZ60B+hBioc+W7I+WGPKIAw46+UyMB7G96M9kPo1F06qyvYJNypD+jFNns+PDGm4rj3xOTDskbohgpfjXZOz+mJgTL9Jd0bg60+tkAjTLjXx/s6FsqkLwqrCA1REPufKnM3zreXFQgJ0mY9139+bSpsRWg02A8fwo8G1Fe6oXaWaB6o3iAeG/baA2E/sQZvXnUSnms1X/KYtbFQuNKTOWDLDOxIcs5yz/OC8mLhGWKrofyOQY9dsuuu5HLD1gVqdo5cmSUc63gWWjRsnqVxHxouo3vRW/s/vgufW5SfMipzrfiMTh4tufDzHShlcOFqjq69lLedUaIax5zKUAlh5y9ZqWB90VI23LRCD/uknhjPcohGHvr6jpRKu3xYQiVWNVMc5Q="

matrix:
  include:
    - os: linux
      addons:
        apt:
          packages:
            - swig
            - gradle
      compiler: gcc
    - os: linux
      dist: trusty
      sudo: required
      addons:
        apt:
          packages:
            - swig
      compiler: clang
    - os: osx
      osx_image: beta-xcode6.2  # Mac OS X 10.9
      compiler: gcc
    - os: osx
      osx_image: beta-xcode6.2  # Mac OS X 10.9
      compiler: clang

before_install:
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then brew update ; brew install swig ; fi

script:
  - set -e
  - make clean swig all
  - mkdir -p $HOME/.m2
  - cat java/settings.xml | sed s/__MAVEN_SERVER_USERNAME__/$MAVEN_SERVER_USERNAME/g | sed s/__MAVEN_SERVER_PASSWORD__/$MAVEN_SERVER_PASSWORD/g > $HOME/.m2/settings.xml
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then cd java/native-osx_64 ; else cd java/native-linux_64 ; fi
  - mvn package
# Only deploy the clang compiled artifacts
  - if [[ "$CXX" == "clang++" ]]; then mvn deploy ; fi
# Prepare to run tests
  - cd $TRAVIS_BUILD_DIR
  - ./gradlew -b java/cli/build.gradle clean installDist
  - cd build
  - mkdir -p transcoded/C/ transcoded/C++/ transcoded/Java/
# Test base jxrlib C library
  - for input in ../fixtures/first-tiles/*; do bn=${input##*/} ; bn=${bn%.jxr} ; ./JxrDecApp -i "$input" -o "transcoded/C/$bn.tif" ; done
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then export DYLD_LIBRARY_PATH=`pwd` ; else export LD_LIBRARY_PATH=`pwd` ; fi
# Test jxrlib C++ wrapper library (file to file)
  - for input in ../fixtures/first-tiles/*; do bn=${input##*/} ; bn=${bn%.jxr} ; ./jxrdecode "$input" "transcoded/C++/$bn.tif" ; done
# Test jxrlib C++ wrapper library (in memory)
  - for input in ../fixtures/first-tiles/*; do ./jxrdecode --in-memory "$input" &> /dev/null ; done
# Test jxrlib Java bindings (file to file)
  - for input in ../fixtures/first-tiles/*; do bn=${input##*/} ; bn=${bn%.jxr} ; ../java/cli/build/install/cli/bin/cli "$input" "transcoded/Java/$bn.tif" ; done
# Test jxrlib Java bindings (in memory)
  - mvn -f ../java/pom.xml test

cache:
  directories:
# Don't repopulate the entire Maven repository every time we build
    - $HOME/.m2/repository
# Don't redownload the Gradle wrapper distributions
    - $HOME/.gradle/wrapper/dists
